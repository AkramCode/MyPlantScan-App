import React, { useMemo } from 'react';
import { View, Text, StyleSheet, ScrollView, Image, TouchableOpacity, Alert } from 'react-native';
import { Stack, useLocalSearchParams, router } from 'expo-router';
import { usePlantStore } from '@/hooks/plant-store';
import { 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Eye, 
  Activity, 
  Thermometer,
  Info,
  Shield,
  TrendingUp,
  Calendar,
  Share as ShareIcon,
  ArrowLeft
} from 'lucide-react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { Colors, getHealthStatusColor, getSeverityColor } from '@/constants/colors';
import { trackEvent } from '@/lib/analytics';
import { useSettings } from '@/providers/settings-provider';
import * as Sharing from 'expo-sharing';

export default function HealthReportScreen() {
  const { id, plantId, source } = useLocalSearchParams<{ id?: string; plantId?: string; source?: string }>();
  const { healthRecords } = usePlantStore();
  const insets = useSafeAreaInsets();
  const [showAIDisclaimer, setShowAIDisclaimer] = React.useState(true);
  const { settings } = useSettings();
  const healthInsightsEnabled = settings.healthInsights;
  
  const handleBackPress = () => {
    if (source === 'health') {
      router.push('/health');
    } else if (source === 'plant-details') {
      router.back();
    } else if (source === 'camera') {
      router.push('/health');
    } else {
      // Default fallback to health screen
      router.push('/health');
    }
  };
  
  // Find health record by id (direct health record ID) or plantId (plant identification ID)
  const healthRecord = healthRecords.find(record => 
    record.id === id || record.plantId === plantId || record.id === plantId
  ) || healthRecords[0]; // Fallback to most recent record if no match
  
    const getPrognosisColor = (prognosis: string) => {
    switch (prognosis) {
      case 'excellent': return Colors.success;
      case 'good': return Colors.primaryDark;
      case 'fair': return Colors.warning;
      case 'poor': return Colors.error;
      default: return Colors.textSecondary;
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const shareReport = async () => {
    try {
      const reportText = `Plant Health Report\n\nPlant: ${healthRecord.plantName || 'Unknown'}\nStatus: ${healthRecord.healthStatus.replace('_', ' ').toUpperCase()}\nSeverity: ${healthRecord.severity.toUpperCase()}\nDate: ${formatDate(healthRecord.timestamp)}\n\nDiagnosis: ${healthRecord.diagnosis?.primaryCondition || 'N/A'}\nPrognosis: ${healthRecord.diagnosis?.prognosis || 'N/A'}\n\nGenerated by MyPlantScan`;
      
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(reportText, {
          dialogTitle: 'Plant Health Report',
        });
      } else {
        Alert.alert('Share', 'Sharing is not available on this device');
      }

      trackEvent('health_report.share', {
        reportId: healthRecord.id,
        plantId: healthRecord.plantId,
        healthStatus: healthRecord.healthStatus,
      });
    } catch (error) {
      console.error('Error sharing report:', error);
      Alert.alert('Error', 'Failed to share health report');
    }
  };

  const derivedInsights = useMemo(() => {
    if (!healthRecord) {
      return {
        headline: '',
        summary: '',
        statusPills: [],
        sections: [],
      };
    }

    const severityHeadlineMap: Record<string, string> = {
      high: 'Urgent care recommended',
      medium: 'Targeted care suggested',
      low: 'Care routine on track',
    };

    const severityDescriptorMap: Record<string, string> = {
      high: 'AI flagged a high severity issue that needs attention right away.',
      medium: 'Issue is moderate - address soon to keep it from escalating.',
      low: 'Issue is mild - stay consistent with the care plan.',
    };

    const stageDescriptorMap: Record<string, string> = {
      early: 'Problem caught early; quick action can prevent spread.',
      moderate: 'Condition is developing; monitor responses closely.',
      advanced: 'Condition is advanced; expect a longer recovery window.',
    };

    const prognosisDescriptorMap: Record<string, string> = {
      excellent: 'Excellent prognosis - plant should rebound quickly.',
      good: 'Good prognosis with consistent follow-up.',
      fair: 'Fair prognosis - expect gradual improvement.',
      poor: 'Poor prognosis - consider intensive intervention.',
    };

    const stageColorMap: Record<string, { text: string; background: string }> = {
      early: { text: Colors.success, background: Colors.successLight },
      moderate: { text: Colors.warning, background: Colors.warningLight },
      advanced: { text: Colors.error, background: Colors.errorLight },
    };

    const severityBackgroundMap: Record<string, string> = {
      high: Colors.errorLight,
      medium: Colors.warningLight,
      low: Colors.successLight,
    };

    const progressionStage = healthRecord.diagnosis?.progressionStage;
    const severity = healthRecord.severity;
    const prognosis = healthRecord.diagnosis?.prognosis;

    const conditionName = healthRecord.diagnosis?.primaryCondition || healthRecord.issues?.[0] || 'Plant stress detected';
    const affectedParts = healthRecord.diagnosis?.affectedParts ?? [];

    const summaryParts = [
      severityDescriptorMap[severity],
      progressionStage ? stageDescriptorMap[progressionStage] : undefined,
      prognosis ? prognosisDescriptorMap[prognosis] : undefined,
      affectedParts.length ? `Focus care on ${affectedParts.join(', ')}.` : undefined,
      healthRecord.causes?.primary ? `Likely trigger: ${healthRecord.causes.primary}.` : undefined,
    ].filter(Boolean) as string[];

    const summary = summaryParts.length > 0
      ? summaryParts.join(' ').trim()
      : 'AI generated this report with tailored recommendations below.';

    const severityColor = severity ? getSeverityColor(severity) : Colors.textSecondary;

    const statusPills: { label: string; textColor: string; background: string }[] = severity
      ? [{
          label: `${severity.charAt(0).toUpperCase()}${severity.slice(1)} severity`,
          textColor: severityColor,
          background: severityBackgroundMap[severity] || Colors.gray100,
        }]
      : [];

    if (progressionStage) {
      const stageMeta = stageColorMap[progressionStage] || { text: Colors.textSecondary, background: Colors.gray100 };
      const stageLabelMap: Record<string, string> = {
        early: 'Early stage',
        moderate: 'Moderate stage',
        advanced: 'Advanced stage',
      };
      statusPills.push({
        label: stageLabelMap[progressionStage] || 'Stage unknown',
        textColor: stageMeta.text,
        background: stageMeta.background,
      });
    }

    if (prognosis) {
      const prognosisColor = getPrognosisColor(prognosis);
      const prognosisBackground = prognosis === 'poor'
        ? Colors.errorLight
        : prognosis === 'fair'
          ? Colors.warningLight
          : Colors.primaryLight;
      const prognosisLabel = `${prognosis.charAt(0).toUpperCase()}${prognosis.slice(1)} prognosis`;
      statusPills.push({
        label: prognosisLabel,
        textColor: prognosisColor,
        background: prognosisBackground,
      });
    }

    const immediateActions = [
      ...(healthRecord.treatment?.immediate ?? []),
      ...(healthRecord.treatment?.shortTerm ?? []),
    ].filter(Boolean);

    const uniqueImmediate = Array.from(new Set(immediateActions)).slice(0, 3);

    const nextChecks: string[] = [];
    if (healthRecord.monitoring?.checkFrequency) {
      nextChecks.push(`Check ${healthRecord.monitoring.checkFrequency}`);
    }
    if (healthRecord.monitoring?.recoveryTimeframe) {
      nextChecks.push(`Recovery window: ${healthRecord.monitoring.recoveryTimeframe}`);
    }
    if (healthRecord.monitoring?.keyIndicators?.length) {
      nextChecks.push(...healthRecord.monitoring.keyIndicators.slice(0, 2));
    }

    const environmentWatch = new Set<string>();
    (healthRecord.causes?.environmental ?? []).slice(0, 2).forEach(item => environmentWatch.add(item));
    (healthRecord.riskFactors ?? []).slice(0, 2).forEach(item => environmentWatch.add(item));

    const sections = [
      uniqueImmediate.length > 0 && {
        key: 'actions',
        title: 'Immediate Priorities',
        icon: Shield,
        color: Colors.primary,
        background: Colors.primaryLight,
        items: uniqueImmediate,
      },
      nextChecks.length > 0 && {
        key: 'monitoring',
        title: 'Next Checks',
        icon: Clock,
        color: Colors.secondary,
        background: Colors.infoLight,
        items: nextChecks,
      },
      environmentWatch.size > 0 && {
        key: 'environment',
        title: 'Environment Watch',
        icon: Thermometer,
        color: Colors.warning,
        background: Colors.warningLight,
        items: Array.from(environmentWatch),
      },
    ].filter(Boolean) as {
      key: string;
      title: string;
      icon: typeof Shield;
      color: string;
      background: string;
      items: string[];
    }[];

    return {
      headline: `${severityHeadlineMap[severity] || 'AI summary'}: ${conditionName}`,
      summary,
      statusPills,
      sections,
    };
  }, [healthRecord]);

  // Render

  if (!healthRecord) {
    return (
      <View style={styles.container}>
        <Stack.Screen options={{ title: 'Health Report', headerShown: false }} />
        <View style={styles.errorContainer}>
          <AlertTriangle size={64} color={Colors.error} />
          <Text style={styles.errorTitle}>Report Not Found</Text>
          <Text style={styles.errorDescription}>The health report you&apos;re looking for doesn&apos;t exist.</Text>
          <TouchableOpacity style={styles.backButton} onPress={handleBackPress}>
            <Text style={styles.backButtonText}>Go Back</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  const StatusIcon = healthRecord.healthStatus === 'healthy' ? CheckCircle : AlertTriangle;

  return (
    <View style={styles.container}>
      <Stack.Screen options={{ title: 'Health Report', headerShown: false }} />
      <ScrollView showsVerticalScrollIndicator={false} style={styles.scrollView}>
        {!healthInsightsEnabled && (
          <View style={styles.preferenceNotice}>
            <Info size={16} color={Colors.warning} />
            <Text style={styles.preferenceNoticeText}>Health insights digest is off. Enable it in Settings for weekly summaries.</Text>
          </View>
        )}

        {/* Plant Image with Overlay Buttons */}
        <View style={styles.imageSection}>
          <Image source={{ uri: healthRecord.imageUri }} style={styles.plantImage} />
          
          {/* Back Button Overlay */}
          <TouchableOpacity style={[styles.overlayBackButton, { top: insets.top + 16 }]} onPress={handleBackPress}>
            <ArrowLeft size={24} color="#FFFFFF" />
          </TouchableOpacity>
          
          {/* Share Button Overlay */}
          <TouchableOpacity style={[styles.overlayShareButton, { top: insets.top + 16 }]} onPress={shareReport}>
            <ShareIcon size={24} color="#FFFFFF" />
          </TouchableOpacity>
          
          <View style={styles.imageOverlay}>
            <View style={styles.statusBadge}>
              <StatusIcon size={16} color={getHealthStatusColor(healthRecord.healthStatus)} />
              <Text style={[styles.statusText, { color: getHealthStatusColor(healthRecord.healthStatus) }]}>
                {healthRecord.healthStatus.replace('_', ' ').toUpperCase()}
              </Text>
            </View>
          </View>
        </View>

        {/* AI Disclaimer (moved below image) */}
        {showAIDisclaimer && (
          <View style={styles.disclaimer}>
            <Text style={styles.disclaimerText}>
              This health analysis was generated by AI and may be incorrect. Use as guidance and consult an expert for confirmation.
            </Text>
            <TouchableOpacity onPress={() => setShowAIDisclaimer(false)} style={styles.disclaimerClose}>
              <Text style={styles.disclaimerCloseText}>×</Text>
            </TouchableOpacity>
          </View>
        )}

        {/* Report Header */}
        <View style={styles.reportHeader}>
          <View style={styles.reportInfo}>
            <Text style={styles.plantName}>{healthRecord.plantName || 'Unknown Plant'}</Text>
            {healthRecord.scientificName && (
              <Text style={styles.scientificName}>{healthRecord.scientificName}</Text>
            )}
            <View style={styles.dateContainer}>
              <Calendar size={16} color={Colors.textSecondary} />
              <Text style={styles.dateText}>{formatDate(healthRecord.timestamp)}</Text>
            </View>
          </View>
        </View>

        {/* AI Insights */}
        <View style={styles.insightCard}>
          <Text style={styles.insightLabel}>AI Summary</Text>
          <Text style={styles.insightHeadline}>{derivedInsights.headline}</Text>
          {derivedInsights.summary ? (
            <Text style={styles.insightBody}>{derivedInsights.summary}</Text>
          ) : null}
          {derivedInsights.statusPills.length > 0 && (
            <View style={styles.statusPillsRow}>
              {derivedInsights.statusPills.map((pill) => (
                <View
                  key={pill.label}
                  style={[styles.statusPill, { backgroundColor: pill.background }]}
                >
                  <Text style={[styles.statusPillText, { color: pill.textColor }]}>
                    {pill.label}
                  </Text>
                </View>
              ))}
            </View>
          )}
          {derivedInsights.sections.map((section) => {
            const IconComponent = section.icon;
            return (
              <View key={section.key} style={styles.insightSection}>
                <View
                  style={[
                    styles.insightSectionHeader,
                    { backgroundColor: section.background },
                  ]}
                >
                  <IconComponent size={16} color={section.color} />
                  <Text style={[styles.insightSectionTitle, { color: section.color }]}>
                    {section.title}
                  </Text>
                </View>
                <View style={styles.insightSectionList}>
                  {section.items.map((item, index) => (
                    <View
                      key={`${section.key}-${index}`}
                      style={styles.insightItem}
                    >
                      <View style={styles.insightBullet} />
                      <Text style={styles.insightItemText}>{item}</Text>
                    </View>
                  ))}
                </View>
              </View>
            );
          })}
        </View>

        {/* Quick Stats */}
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Activity size={20} color={getSeverityColor(healthRecord.severity)} />
            <Text style={styles.statLabel}>Severity</Text>
            <Text style={[styles.statValue, { color: getSeverityColor(healthRecord.severity) }]}>
              {healthRecord.severity.toUpperCase()}
            </Text>
          </View>
          <View style={[styles.statCard, styles.statCardMiddle]}>
            <TrendingUp size={20} color={getPrognosisColor(healthRecord.diagnosis?.prognosis || 'fair')} />
            <Text style={styles.statLabel}>Prognosis</Text>
            <Text style={[styles.statValue, { color: getPrognosisColor(healthRecord.diagnosis?.prognosis || 'fair') }]}>
              {(healthRecord.diagnosis?.prognosis || 'FAIR').toUpperCase()}
            </Text>
          </View>
          <View style={styles.statCard}>
            <Clock size={20} color={Colors.textSecondary} />
            <Text style={styles.statLabel}>Recovery</Text>
            <Text style={styles.statValue}>
              {healthRecord.monitoring?.recoveryTimeframe || 'Variable'}
            </Text>
          </View>
        </View>

        {/* Diagnosis Section */}
        {healthRecord.diagnosis && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Eye size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Diagnosis</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.diagnosisItem}>
                <Text style={styles.diagnosisLabel}>Primary Condition</Text>
                <Text style={styles.diagnosisValue}>{healthRecord.diagnosis.primaryCondition}</Text>
              </View>
              {healthRecord.diagnosis.secondaryConditions.length > 0 && (
                <View style={styles.diagnosisItem}>
                  <Text style={styles.diagnosisLabel}>Secondary Conditions</Text>
                  {healthRecord.diagnosis.secondaryConditions.map((condition, index) => (
                    <Text key={index} style={styles.diagnosisValue}>
                      {'-'} {condition}
                    </Text>
                  ))}
                </View>
              )}
              <View style={styles.diagnosisItem}>
                <Text style={styles.diagnosisLabel}>Affected Parts</Text>
                <Text style={styles.diagnosisValue}>{healthRecord.diagnosis.affectedParts.join(', ')}</Text>
              </View>
              <View style={styles.diagnosisItem}>
                <Text style={styles.diagnosisLabel}>Progression Stage</Text>
                <Text style={[styles.diagnosisValue, { 
                  color: healthRecord.diagnosis.progressionStage === 'early' ? Colors.success :
                         healthRecord.diagnosis.progressionStage === 'moderate' ? Colors.warning : Colors.error
                }]}>
                  {healthRecord.diagnosis.progressionStage.toUpperCase()}
                </Text>
              </View>
            </View>
          </View>
        )}

        {/* Symptoms Section */}
        {healthRecord.symptoms && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <AlertTriangle size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Symptoms</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.symptoms.visual.length > 0 && (
                <View style={styles.symptomCategory}>
                  <Text style={styles.symptomCategoryTitle}>Visual Symptoms</Text>
                  {healthRecord.symptoms.visual.map((symptom, index) => (
                    <Text key={index} style={styles.symptomItem}>
                      {'-'} {symptom}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.symptoms.physical.length > 0 && (
                <View style={styles.symptomCategory}>
                  <Text style={styles.symptomCategoryTitle}>Physical Symptoms</Text>
                  {healthRecord.symptoms.physical.map((symptom, index) => (
                    <Text key={index} style={styles.symptomItem}>
                      {'-'} {symptom}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.symptoms.environmental.length > 0 && (
                <View style={styles.symptomCategory}>
                  <Text style={styles.symptomCategoryTitle}>Environmental Indicators</Text>
                  {healthRecord.symptoms.environmental.map((symptom, index) => (
                    <Text key={index} style={styles.symptomItem}>
                      {'-'} {symptom}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        {/* Causes Section */}
        {healthRecord.causes && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Thermometer size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Causes</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.causeItem}>
                <Text style={styles.causeLabel}>Primary Cause</Text>
                <Text style={styles.causeValue}>{healthRecord.causes.primary}</Text>
              </View>
              {healthRecord.causes.contributing.length > 0 && (
                <View style={styles.causeItem}>
                  <Text style={styles.causeLabel}>Contributing Factors</Text>
                  {healthRecord.causes.contributing.map((cause, index) => (
                    <Text key={index} style={styles.causeValue}>
                      {'-'} {cause}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.causes.environmental.length > 0 && (
                <View style={styles.causeItem}>
                  <Text style={styles.causeLabel}>Environmental Factors</Text>
                  {healthRecord.causes.environmental.map((cause, index) => (
                    <Text key={index} style={styles.causeValue}>
                      {'-'} {cause}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        {/* Treatment Plan */}
        {healthRecord.treatment && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Shield size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Treatment Plan</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.treatment.immediate.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Immediate Actions</Text>
                  {healthRecord.treatment.immediate.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'-'} {action}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.treatment.shortTerm.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Short-term Treatment (1-2 weeks)</Text>
                  {healthRecord.treatment.shortTerm.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'-'} {action}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.treatment.longTerm.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Long-term Care</Text>
                  {healthRecord.treatment.longTerm.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'-'} {action}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.treatment.preventive.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Prevention</Text>
                  {healthRecord.treatment.preventive.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'-'} {action}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        {/* Monitoring Guidelines */}
        {healthRecord.monitoring && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Activity size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Monitoring Guidelines</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.monitoringItem}>
                <Text style={styles.monitoringLabel}>Check Frequency</Text>
                <Text style={styles.monitoringValue}>{healthRecord.monitoring.checkFrequency}</Text>
              </View>
              <View style={styles.monitoringItem}>
                <Text style={styles.monitoringLabel}>Key Indicators to Watch</Text>
                {healthRecord.monitoring.keyIndicators.map((indicator, index) => (
                  <Text key={index} style={styles.monitoringValue}>
                    {'-'} {indicator}
                  </Text>
                ))}
              </View>
              <View style={styles.monitoringItem}>
                <Text style={styles.monitoringLabel}>Expected Recovery Time</Text>
                <Text style={styles.monitoringValue}>{healthRecord.monitoring.recoveryTimeframe}</Text>
              </View>
            </View>
          </View>
        )}

        {/* Risk Factors */}
        {healthRecord.riskFactors && healthRecord.riskFactors.length > 0 && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <AlertTriangle size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Risk Factors</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.riskFactors.map((risk, index) => (
                <Text key={index} style={styles.riskItem}>
                  {'-'} {risk}
                </Text>
              ))}
            </View>
          </View>
        )}

        {/* Legacy Issues and Recommendations */}
        {(healthRecord.issues.length > 0 || healthRecord.recommendations.length > 0) && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <CheckCircle size={20} color={Colors.textPrimary} />
              <Text style={styles.sectionTitle}>Summary</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.issues.length > 0 && (
                <View style={styles.summaryItem}>
                  <Text style={styles.summaryLabel}>Issues Identified</Text>
                  {healthRecord.issues.map((issue, index) => (
                    <Text key={index} style={styles.summaryValue}>
                      {'-'} {issue}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.recommendations.length > 0 && (
                <View style={styles.summaryItem}>
                  <Text style={styles.summaryLabel}>General Recommendations</Text>
                  {healthRecord.recommendations.map((rec, index) => (
                    <Text key={index} style={styles.summaryValue}>
                      {'-'} {rec}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        <View style={styles.footer}>
          <Text style={styles.footerText}>Report generated by MyPlantScan AI</Text>
          <Text style={styles.footerSubtext}>For professional diagnosis, consult a plant pathologist</Text>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background,
  },
  scrollView: {
    flex: 1,
  },
  preferenceNotice: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.warningLight,
    borderColor: Colors.warningBorder,
    borderWidth: 1,
    borderRadius: 12,
    marginHorizontal: 16,
    marginTop: 16,
    paddingHorizontal: 12,
    paddingVertical: 10,
  },
  preferenceNoticeText: {
    flex: 1,
    marginLeft: 8,
    fontSize: 13,
    lineHeight: 18,
    color: Colors.textSecondary,
  },
  overlayBackButton: {
    position: 'absolute',
    left: 16,
    zIndex: 10,
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  overlayShareButton: {
    position: 'absolute',
    right: 16,
    zIndex: 10,
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageSection: {
    position: 'relative',
    height: 300,
  },
  plantImage: {
    width: '100%',
    height: '100%',
    backgroundColor: Colors.gray100,
  },
  imageOverlay: {
    position: 'absolute',
    bottom: 16,
    left: 16,
  },
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
    marginLeft: 4,
  },
  reportHeader: {
    backgroundColor: Colors.surface,
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: Colors.gray200,
  },
  reportInfo: {
    alignItems: 'center',
  },
  insightCard: {
    backgroundColor: Colors.surface,
    marginHorizontal: 16,
    marginTop: 16,
    padding: 20,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: Colors.gray200,
  },
  insightLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: Colors.textTertiary,
    letterSpacing: 0.5,
    textTransform: 'uppercase',
  },
  insightHeadline: {
    marginTop: 8,
    fontSize: 20,
    fontWeight: '700',
    color: Colors.textPrimary,
    lineHeight: 26,
  },
  insightBody: {
    marginTop: 8,
    fontSize: 14,
    color: Colors.textSecondary,
    lineHeight: 20,
  },
  statusPillsRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 12,
  },
  statusPill: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginRight: 8,
    marginBottom: 8,
  },
  statusPillText: {
    fontSize: 12,
    fontWeight: '600',
    color: Colors.textPrimary,
  },
  insightSection: {
    marginTop: 16,
  },
  insightSectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginBottom: 12,
  },
  insightSectionTitle: {
    marginLeft: 8,
    fontSize: 13,
    fontWeight: '600',
  },
  insightSectionList: {
  },
  insightItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  insightBullet: {
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: Colors.gray300,
    marginTop: 7,
    marginRight: 10,
  },
  insightItemText: {
    flex: 1,
    fontSize: 14,
    color: Colors.textSecondary,
    lineHeight: 20,
  },
  plantName: {
    fontSize: 26,
    fontWeight: '700',
    color: Colors.textPrimary,
    textAlign: 'center',
    marginBottom: 6,
    lineHeight: 32,
  },
  scientificName: {
    fontSize: 17,
    fontStyle: 'italic',
    color: Colors.textSecondary,
    textAlign: 'center',
    marginBottom: 16,
    lineHeight: 22,
  },
  dateContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  dateText: {
    fontSize: 15,
    color: Colors.textSecondary,
    marginLeft: 6,
    lineHeight: 20,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: Colors.surface,
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: Colors.gray200,
  },
  statCard: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 16,
  },
  statCardMiddle: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderLeftColor: Colors.gray200,
    borderRightColor: Colors.gray200,
  },
  statLabel: {
    fontSize: 13,
    color: Colors.textSecondary,
    marginTop: 10,
    marginBottom: 6,
    textAlign: 'center',
  },
  statValue: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.textPrimary,
    textAlign: 'center',
    lineHeight: 20,
  },
  section: {
    backgroundColor: Colors.surface,
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: Colors.gray200,
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 18,
    borderBottomWidth: 1,
    borderBottomColor: Colors.gray200,
  },
  sectionTitle: {
    fontSize: 19,
    fontWeight: '600',
    color: Colors.textPrimary,
    marginLeft: 10,
    lineHeight: 24,
  },
  sectionContent: {
    padding: 18,
  },
  diagnosisItem: {
    marginBottom: 18,
  },
  diagnosisLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.gray700,
    marginBottom: 6,
    lineHeight: 20,
  },
  diagnosisValue: {
    fontSize: 15,
    color: Colors.textSecondary,
    lineHeight: 22,
  },
  symptomCategory: {
    marginBottom: 18,
  },
  symptomCategoryTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.gray700,
    marginBottom: 10,
    lineHeight: 20,
  },
  symptomItem: {
    fontSize: 15,
    color: Colors.textSecondary,
    lineHeight: 22,
    marginBottom: 6,
  },
  causeItem: {
    marginBottom: 18,
  },
  causeLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.gray700,
    marginBottom: 6,
    lineHeight: 20,
  },
  causeValue: {
    fontSize: 15,
    color: Colors.textSecondary,
    lineHeight: 22,
    marginBottom: 4,
  },
  treatmentCategory: {
    marginBottom: 18,
  },
  treatmentCategoryTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.gray700,
    marginBottom: 10,
    lineHeight: 20,
  },
  treatmentItem: {
    fontSize: 15,
    color: Colors.textSecondary,
    lineHeight: 22,
    marginBottom: 6,
  },
  monitoringItem: {
    marginBottom: 18,
  },
  monitoringLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.gray700,
    marginBottom: 6,
    lineHeight: 20,
  },
  monitoringValue: {
    fontSize: 15,
    color: Colors.textSecondary,
    lineHeight: 22,
    marginBottom: 4,
  },
  riskItem: {
    fontSize: 15,
    color: Colors.error,
    lineHeight: 22,
    marginBottom: 6,
  },
  summaryItem: {
    marginBottom: 18,
  },
  summaryLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: Colors.gray700,
    marginBottom: 6,
    lineHeight: 20,
  },
  summaryValue: {
    fontSize: 15,
    color: Colors.textSecondary,
    lineHeight: 22,
    marginBottom: 4,
  },
  footer: {
    alignItems: 'center',
    paddingVertical: 24,
    paddingHorizontal: 16,
  },
  footerText: {
    fontSize: 12,
    color: Colors.textTertiary,
    textAlign: 'center',
  },
  footerSubtext: {
    fontSize: 11,
    color: Colors.gray300,
    textAlign: 'center',
    marginTop: 4,
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 32,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: Colors.textPrimary,
    marginTop: 16,
    marginBottom: 8,
  },
  errorDescription: {
    fontSize: 16,
    color: Colors.textSecondary,
    textAlign: 'center',
    marginBottom: 24,
  },
  backButton: {
    backgroundColor: Colors.primary,
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  backButtonText: {
    color: Colors.white,
    fontSize: 16,
    fontWeight: '600',
  },
  disclaimer: {
    backgroundColor: '#FEF3C7',
    borderColor: '#FDE68A',
    borderWidth: 1,
    padding: 12,
    borderRadius: 10,
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 16,
    marginTop: 12,
    marginBottom: 8,
  },
  disclaimerText: {
    flex: 1,
    color: '#92400E',
    fontSize: 13,
  },
  disclaimerClose: {
    marginLeft: 12,
    padding: 6,
  },
  disclaimerCloseText: {
    fontSize: 18,
    color: '#92400E',
  },
});

