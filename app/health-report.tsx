import React from 'react';
import { View, Text, StyleSheet, ScrollView, Image, TouchableOpacity, Share as RNShare } from 'react-native';
import { Stack, useLocalSearchParams, router } from 'expo-router';
import { usePlantStore } from '@/hooks/plant-store';
import { 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Eye, 
  Activity, 
  Thermometer,


  Shield,
  TrendingUp,
  Calendar,
  Share as ShareIcon,
  ArrowLeft
} from 'lucide-react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

export default function HealthReportScreen() {
  const { id, plantId, source } = useLocalSearchParams<{ id?: string; plantId?: string; source?: string }>();
  const { healthRecords } = usePlantStore();
  const insets = useSafeAreaInsets();
  
  const handleBackPress = () => {
    if (source === 'health') {
      router.push('/health');
    } else if (source === 'plant-details') {
      router.back();
    } else if (source === 'camera') {
      router.push('/health');
    } else {
      // Default fallback to health screen
      router.push('/health');
    }
  };
  
  // Find health record by id (direct health record ID) or plantId (plant identification ID)
  const healthRecord = healthRecords.find(record => 
    record.id === id || record.plantId === plantId || record.id === plantId
  ) || healthRecords[0]; // Fallback to most recent record if no match
  
  if (!healthRecord) {
    return (
      <View style={styles.container}>
        <Stack.Screen options={{ title: 'Health Report', headerShown: false }} />
        <View style={styles.errorContainer}>
          <AlertTriangle size={64} color="#EF4444" />
          <Text style={styles.errorTitle}>Report Not Found</Text>
          <Text style={styles.errorDescription}>The health report you&apos;re looking for doesn&apos;t exist.</Text>
          <TouchableOpacity style={styles.backButton} onPress={handleBackPress}>
            <Text style={styles.backButtonText}>Go Back</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  const getHealthStatusColor = (status: string) => {
    switch (status) {
      case 'healthy': return '#22C55E';
      case 'diseased': return '#EF4444';
      case 'pest': return '#F59E0B';
      case 'nutrient_deficiency': return '#F59E0B';
      case 'overwatered': return '#3B82F6';
      case 'underwatered': return '#F59E0B';
      default: return '#6B7280';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low': return '#22C55E';
      case 'medium': return '#F59E0B';
      case 'high': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const getPrognosisColor = (prognosis: string) => {
    switch (prognosis) {
      case 'excellent': return '#22C55E';
      case 'good': return '#84CC16';
      case 'fair': return '#F59E0B';
      case 'poor': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const shareReport = async () => {
    try {
      const reportText = `Plant Health Report\n\nPlant: ${healthRecord.plantName || 'Unknown'}\nStatus: ${healthRecord.healthStatus.replace('_', ' ').toUpperCase()}\nSeverity: ${healthRecord.severity.toUpperCase()}\nDate: ${formatDate(healthRecord.timestamp)}\n\nDiagnosis: ${healthRecord.diagnosis?.primaryCondition || 'N/A'}\nPrognosis: ${healthRecord.diagnosis?.prognosis || 'N/A'}\n\nGenerated by MyPlantScan`;
      
      await RNShare.share({
        message: reportText,
        title: 'Plant Health Report',
      });
    } catch (error) {
      console.error('Error sharing report:', error);
    }
  };

  const StatusIcon = healthRecord.healthStatus === 'healthy' ? CheckCircle : AlertTriangle;

  return (
    <View style={styles.container}>
      <Stack.Screen options={{ title: 'Health Report', headerShown: false }} />
      
      <ScrollView showsVerticalScrollIndicator={false} style={styles.scrollView}>
        {/* Plant Image with Overlay Buttons */}
        <View style={styles.imageSection}>
          <Image source={{ uri: healthRecord.imageUri }} style={styles.plantImage} />
          
          {/* Back Button Overlay */}
          <TouchableOpacity style={[styles.overlayBackButton, { top: insets.top + 16 }]} onPress={handleBackPress}>
            <ArrowLeft size={24} color="#FFFFFF" />
          </TouchableOpacity>
          
          {/* Share Button Overlay */}
          <TouchableOpacity style={[styles.overlayShareButton, { top: insets.top + 16 }]} onPress={shareReport}>
            <ShareIcon size={24} color="#FFFFFF" />
          </TouchableOpacity>
          
          <View style={styles.imageOverlay}>
            <View style={styles.statusBadge}>
              <StatusIcon size={16} color={getHealthStatusColor(healthRecord.healthStatus)} />
              <Text style={[styles.statusText, { color: getHealthStatusColor(healthRecord.healthStatus) }]}>
                {healthRecord.healthStatus.replace('_', ' ').toUpperCase()}
              </Text>
            </View>
          </View>
        </View>

        {/* Report Header */}
        <View style={styles.reportHeader}>
          <View style={styles.reportInfo}>
            <Text style={styles.plantName}>{healthRecord.plantName || 'Unknown Plant'}</Text>
            {healthRecord.scientificName && (
              <Text style={styles.scientificName}>{healthRecord.scientificName}</Text>
            )}
            <View style={styles.dateContainer}>
              <Calendar size={16} color="#6B7280" />
              <Text style={styles.dateText}>{formatDate(healthRecord.timestamp)}</Text>
            </View>
          </View>
        </View>

        {/* Quick Stats */}
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Activity size={20} color={getSeverityColor(healthRecord.severity)} />
            <Text style={styles.statLabel}>Severity</Text>
            <Text style={[styles.statValue, { color: getSeverityColor(healthRecord.severity) }]}>
              {healthRecord.severity.toUpperCase()}
            </Text>
          </View>
          <View style={[styles.statCard, styles.statCardMiddle]}>
            <TrendingUp size={20} color={getPrognosisColor(healthRecord.diagnosis?.prognosis || 'fair')} />
            <Text style={styles.statLabel}>Prognosis</Text>
            <Text style={[styles.statValue, { color: getPrognosisColor(healthRecord.diagnosis?.prognosis || 'fair') }]}>
              {(healthRecord.diagnosis?.prognosis || 'FAIR').toUpperCase()}
            </Text>
          </View>
          <View style={styles.statCard}>
            <Clock size={20} color="#6B7280" />
            <Text style={styles.statLabel}>Recovery</Text>
            <Text style={styles.statValue}>
              {healthRecord.monitoring?.recoveryTimeframe || 'Variable'}
            </Text>
          </View>
        </View>

        {/* Diagnosis Section */}
        {healthRecord.diagnosis && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Eye size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Diagnosis</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.diagnosisItem}>
                <Text style={styles.diagnosisLabel}>Primary Condition</Text>
                <Text style={styles.diagnosisValue}>{healthRecord.diagnosis.primaryCondition}</Text>
              </View>
              {healthRecord.diagnosis.secondaryConditions.length > 0 && (
                <View style={styles.diagnosisItem}>
                  <Text style={styles.diagnosisLabel}>Secondary Conditions</Text>
                  {healthRecord.diagnosis.secondaryConditions.map((condition, index) => (
                    <Text key={index} style={styles.diagnosisValue}>
                      {'•'} {condition}
                    </Text>
                  ))}
                </View>
              )}
              <View style={styles.diagnosisItem}>
                <Text style={styles.diagnosisLabel}>Affected Parts</Text>
                <Text style={styles.diagnosisValue}>{healthRecord.diagnosis.affectedParts.join(', ')}</Text>
              </View>
              <View style={styles.diagnosisItem}>
                <Text style={styles.diagnosisLabel}>Progression Stage</Text>
                <Text style={[styles.diagnosisValue, { 
                  color: healthRecord.diagnosis.progressionStage === 'early' ? '#22C55E' : 
                         healthRecord.diagnosis.progressionStage === 'moderate' ? '#F59E0B' : '#EF4444'
                }]}>
                  {healthRecord.diagnosis.progressionStage.toUpperCase()}
                </Text>
              </View>
            </View>
          </View>
        )}

        {/* Symptoms Section */}
        {healthRecord.symptoms && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <AlertTriangle size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Symptoms</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.symptoms.visual.length > 0 && (
                <View style={styles.symptomCategory}>
                  <Text style={styles.symptomCategoryTitle}>Visual Symptoms</Text>
                  {healthRecord.symptoms.visual.map((symptom, index) => (
                    <Text key={index} style={styles.symptomItem}>
                      {'•'} {symptom}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.symptoms.physical.length > 0 && (
                <View style={styles.symptomCategory}>
                  <Text style={styles.symptomCategoryTitle}>Physical Symptoms</Text>
                  {healthRecord.symptoms.physical.map((symptom, index) => (
                    <Text key={index} style={styles.symptomItem}>
                      {'•'} {symptom}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.symptoms.environmental.length > 0 && (
                <View style={styles.symptomCategory}>
                  <Text style={styles.symptomCategoryTitle}>Environmental Indicators</Text>
                  {healthRecord.symptoms.environmental.map((symptom, index) => (
                    <Text key={index} style={styles.symptomItem}>
                      {'•'} {symptom}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        {/* Causes Section */}
        {healthRecord.causes && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Thermometer size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Causes</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.causeItem}>
                <Text style={styles.causeLabel}>Primary Cause</Text>
                <Text style={styles.causeValue}>{healthRecord.causes.primary}</Text>
              </View>
              {healthRecord.causes.contributing.length > 0 && (
                <View style={styles.causeItem}>
                  <Text style={styles.causeLabel}>Contributing Factors</Text>
                  {healthRecord.causes.contributing.map((cause, index) => (
                    <Text key={index} style={styles.causeValue}>
                      {'•'} {cause}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.causes.environmental.length > 0 && (
                <View style={styles.causeItem}>
                  <Text style={styles.causeLabel}>Environmental Factors</Text>
                  {healthRecord.causes.environmental.map((cause, index) => (
                    <Text key={index} style={styles.causeValue}>
                      {'•'} {cause}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        {/* Treatment Plan */}
        {healthRecord.treatment && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Shield size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Treatment Plan</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.treatment.immediate.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Immediate Actions</Text>
                  {healthRecord.treatment.immediate.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'•'} {action}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.treatment.shortTerm.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Short-term Treatment (1-2 weeks)</Text>
                  {healthRecord.treatment.shortTerm.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'•'} {action}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.treatment.longTerm.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Long-term Care</Text>
                  {healthRecord.treatment.longTerm.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'•'} {action}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.treatment.preventive.length > 0 && (
                <View style={styles.treatmentCategory}>
                  <Text style={styles.treatmentCategoryTitle}>Prevention</Text>
                  {healthRecord.treatment.preventive.map((action, index) => (
                    <Text key={index} style={styles.treatmentItem}>
                      {'•'} {action}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        {/* Monitoring Guidelines */}
        {healthRecord.monitoring && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <Activity size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Monitoring Guidelines</Text>
            </View>
            <View style={styles.sectionContent}>
              <View style={styles.monitoringItem}>
                <Text style={styles.monitoringLabel}>Check Frequency</Text>
                <Text style={styles.monitoringValue}>{healthRecord.monitoring.checkFrequency}</Text>
              </View>
              <View style={styles.monitoringItem}>
                <Text style={styles.monitoringLabel}>Key Indicators to Watch</Text>
                {healthRecord.monitoring.keyIndicators.map((indicator, index) => (
                  <Text key={index} style={styles.monitoringValue}>
                    {'•'} {indicator}
                  </Text>
                ))}
              </View>
              <View style={styles.monitoringItem}>
                <Text style={styles.monitoringLabel}>Expected Recovery Time</Text>
                <Text style={styles.monitoringValue}>{healthRecord.monitoring.recoveryTimeframe}</Text>
              </View>
            </View>
          </View>
        )}

        {/* Risk Factors */}
        {healthRecord.riskFactors && healthRecord.riskFactors.length > 0 && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <AlertTriangle size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Risk Factors</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.riskFactors.map((risk, index) => (
                <Text key={index} style={styles.riskItem}>
                  {'•'} {risk}
                </Text>
              ))}
            </View>
          </View>
        )}

        {/* Legacy Issues and Recommendations */}
        {(healthRecord.issues.length > 0 || healthRecord.recommendations.length > 0) && (
          <View style={styles.section}>
            <View style={styles.sectionHeader}>
              <CheckCircle size={20} color="#111827" />
              <Text style={styles.sectionTitle}>Summary</Text>
            </View>
            <View style={styles.sectionContent}>
              {healthRecord.issues.length > 0 && (
                <View style={styles.summaryItem}>
                  <Text style={styles.summaryLabel}>Issues Identified</Text>
                  {healthRecord.issues.map((issue, index) => (
                    <Text key={index} style={styles.summaryValue}>
                      {'•'} {issue}
                    </Text>
                  ))}
                </View>
              )}
              {healthRecord.recommendations.length > 0 && (
                <View style={styles.summaryItem}>
                  <Text style={styles.summaryLabel}>General Recommendations</Text>
                  {healthRecord.recommendations.map((rec, index) => (
                    <Text key={index} style={styles.summaryValue}>
                      {'•'} {rec}
                    </Text>
                  ))}
                </View>
              )}
            </View>
          </View>
        )}

        <View style={styles.footer}>
          <Text style={styles.footerText}>Report generated by MyPlantScan AI</Text>
          <Text style={styles.footerSubtext}>For professional diagnosis, consult a plant pathologist</Text>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  scrollView: {
    flex: 1,
  },
  overlayBackButton: {
    position: 'absolute',
    left: 16,
    zIndex: 10,
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  overlayShareButton: {
    position: 'absolute',
    right: 16,
    zIndex: 10,
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageSection: {
    position: 'relative',
    height: 300,
  },
  plantImage: {
    width: '100%',
    height: '100%',
    backgroundColor: '#F3F4F6',
  },
  imageOverlay: {
    position: 'absolute',
    bottom: 16,
    left: 16,
  },
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
    marginLeft: 4,
  },
  reportHeader: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  reportInfo: {
    alignItems: 'center',
  },
  plantName: {
    fontSize: 26,
    fontWeight: '700',
    color: '#111827',
    textAlign: 'center',
    marginBottom: 6,
    lineHeight: 32,
  },
  scientificName: {
    fontSize: 17,
    fontStyle: 'italic',
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 16,
    lineHeight: 22,
  },
  dateContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  dateText: {
    fontSize: 15,
    color: '#6B7280',
    marginLeft: 6,
    lineHeight: 20,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  statCard: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 16,
  },
  statCardMiddle: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderLeftColor: '#E5E7EB',
    borderRightColor: '#E5E7EB',
  },
  statLabel: {
    fontSize: 13,
    color: '#6B7280',
    marginTop: 10,
    marginBottom: 6,
    textAlign: 'center',
  },
  statValue: {
    fontSize: 15,
    fontWeight: '600',
    color: '#111827',
    textAlign: 'center',
    lineHeight: 20,
  },
  section: {
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginTop: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  sectionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 18,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  sectionTitle: {
    fontSize: 19,
    fontWeight: '600',
    color: '#111827',
    marginLeft: 10,
    lineHeight: 24,
  },
  sectionContent: {
    padding: 18,
  },
  diagnosisItem: {
    marginBottom: 18,
  },
  diagnosisLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 6,
    lineHeight: 20,
  },
  diagnosisValue: {
    fontSize: 15,
    color: '#6B7280',
    lineHeight: 22,
  },
  symptomCategory: {
    marginBottom: 18,
  },
  symptomCategoryTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 10,
    lineHeight: 20,
  },
  symptomItem: {
    fontSize: 15,
    color: '#6B7280',
    lineHeight: 22,
    marginBottom: 6,
  },
  causeItem: {
    marginBottom: 18,
  },
  causeLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 6,
    lineHeight: 20,
  },
  causeValue: {
    fontSize: 15,
    color: '#6B7280',
    lineHeight: 22,
    marginBottom: 4,
  },
  treatmentCategory: {
    marginBottom: 18,
  },
  treatmentCategoryTitle: {
    fontSize: 15,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 10,
    lineHeight: 20,
  },
  treatmentItem: {
    fontSize: 15,
    color: '#6B7280',
    lineHeight: 22,
    marginBottom: 6,
  },
  monitoringItem: {
    marginBottom: 18,
  },
  monitoringLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 6,
    lineHeight: 20,
  },
  monitoringValue: {
    fontSize: 15,
    color: '#6B7280',
    lineHeight: 22,
    marginBottom: 4,
  },
  riskItem: {
    fontSize: 15,
    color: '#EF4444',
    lineHeight: 22,
    marginBottom: 6,
  },
  summaryItem: {
    marginBottom: 18,
  },
  summaryLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 6,
    lineHeight: 20,
  },
  summaryValue: {
    fontSize: 15,
    color: '#6B7280',
    lineHeight: 22,
    marginBottom: 4,
  },
  footer: {
    alignItems: 'center',
    paddingVertical: 24,
    paddingHorizontal: 16,
  },
  footerText: {
    fontSize: 12,
    color: '#9CA3AF',
    textAlign: 'center',
  },
  footerSubtext: {
    fontSize: 11,
    color: '#D1D5DB',
    textAlign: 'center',
    marginTop: 4,
  },
  errorContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 32,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#111827',
    marginTop: 16,
    marginBottom: 8,
  },
  errorDescription: {
    fontSize: 16,
    color: '#6B7280',
    textAlign: 'center',
    marginBottom: 24,
  },
  backButton: {
    backgroundColor: '#22C55E',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  backButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});
