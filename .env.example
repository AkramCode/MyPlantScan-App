# Supabase Configuration
# Get these values from your Supabase project dashboard at https://supabase.com/dashboard

# Your Supabase project URL (found in Settings > API)
EXPO_PUBLIC_SUPABASE_URL=https://your-project-id.supabase.co

# Your Supabase anon/public key (found in Settings > API)
EXPO_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here

# OpenRouter Configuration
# Get your API key from https://openrouter.ai/keys
EXPO_PUBLIC_OPENROUTER_API_KEY=your-openrouter-api-key-here

# Instructions:
# 1. Create a new Supabase project at https://supabase.com
# 2. Go to Settings > API in your Supabase dashboard
# 3. Copy the Project URL and paste it as EXPO_PUBLIC_SUPABASE_URL
# 4. Copy the anon public key and paste it as EXPO_PUBLIC_SUPABASE_ANON_KEY
# 5. Create an OpenRouter account at https://openrouter.ai
# 6. Go to https://openrouter.ai/keys and create an API key
# 7. Copy the API key and paste it as EXPO_PUBLIC_OPENROUTER_API_KEY
# 8. Rename this file to .env
# 9. Make sure .env is in your .gitignore file (it should be by default)

# Database Setup:
# You'll also need to create a profiles table in your Supabase database.
# Run this SQL in the Supabase SQL editor:

# CREATE TABLE profiles (
#   id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
#   email TEXT NOT NULL,
#   full_name TEXT,
#   avatar_url TEXT,
#   created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
#   updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
# );

# -- Enable Row Level Security
# ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

# -- Create policies
# CREATE POLICY "Users can view own profile" ON profiles
#   FOR SELECT USING (auth.uid() = id);

# CREATE POLICY "Users can update own profile" ON profiles
#   FOR UPDATE USING (auth.uid() = id);

# CREATE POLICY "Users can insert own profile" ON profiles
#   FOR INSERT WITH CHECK (auth.uid() = id);

# -- Create a function to handle user creation
# CREATE OR REPLACE FUNCTION public.handle_new_user()
# RETURNS TRIGGER AS $$
# BEGIN
#   INSERT INTO public.profiles (id, email, full_name)
#   VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
#   RETURN NEW;
# END;
# $$ LANGUAGE plpgsql SECURITY DEFINER;

# -- Create a trigger to automatically create profile on signup
# CREATE TRIGGER on_auth_user_created
#   AFTER INSERT ON auth.users
#   FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();